(window.webpackJsonp=window.webpackJsonp||[]).push([[184],{781:function(_,t,v){"use strict";v.r(t);var a=v(24),s=Object(a.a)({},(function(){var _=this,t=_.$createElement,v=_._self._c||t;return v("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[v("h3",{attrs:{id:"浏览器"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#浏览器"}},[_._v("#")]),_._v(" 浏览器")]),_._v(" "),v("h4",{attrs:{id:"_1-说一说cookie、sessionstorage、localstorage？"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-说一说cookie、sessionstorage、localstorage？"}},[_._v("#")]),_._v(" 1.说一说cookie、sessionStorage、localStorage？")]),_._v(" "),v("ul",[v("li",[_._v("cookie：容量小，约4kb左右，生命周期自定义，请求时可以自动携带，前后端都可以设置。")]),_._v(" "),v("li",[_._v("sessionStorage：容量大，约5MB左右，关闭页面后自动清除。")]),_._v(" "),v("li",[_._v("localStorage：容量大，约20MB左右，永久保存，需要手动删除。")])]),_._v(" "),v("h4",{attrs:{id:"_2-浏览器的垃圾回收机制"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-浏览器的垃圾回收机制"}},[_._v("#")]),_._v(" 2.浏览器的垃圾回收机制")]),_._v(" "),v("p",[_._v("新时代")]),_._v(" "),v("p",[_._v("采用空间换时间的 scavenge 算法：整个空间分为两块，变量仅存在其中一块，回收的时候将存活变量复制到另一块空间，不存活的回收掉，周而复始轮流操作")]),_._v(" "),v("p",[_._v("旧时代")]),_._v(" "),v("ul",[v("li",[_._v("标记清除：给全部活动变量打个标记，没有打标记的，到清除阶段则清除")]),_._v(" "),v("li",[_._v("引用清除：当没有其他变量引用它时候则清除")])]),_._v(" "),v("h4",{attrs:{id:"_3-前端路由是什么？有哪几种实现方式"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-前端路由是什么？有哪几种实现方式"}},[_._v("#")]),_._v(" 3.前端路由是什么？有哪几种实现方式")]),_._v(" "),v("p",[_._v("主要有两种")]),_._v(" "),v("ul",[v("li",[_._v("1.hash模式，监听url#后的内容，执行相应操作，实现前端路由")]),_._v(" "),v("li",[_._v("2.history模式，利用historyApi实现路由，重写history.pushState和history.replaceState来让popstate能够被触发")])]),_._v(" "),v("p",[v("code",{staticClass:"default"},[_._v("hash")]),_._v("：浏览器也有一个hashChange事件，监听这个事件，来渲染不同的组件代码。")]),_._v(" "),v("ul",[v("li",[_._v("hash模式所有的工作都是在前端完成的，不需要后端服务的配合")]),_._v(" "),v("li",[_._v("hash模式的实现方式就是通过监听URL中hash部分的变化，从而做出对应的渲染逻辑")]),_._v(" "),v("li",[_._v("hash模式下，URL中会带有#，看起来不太美观")])]),_._v(" "),v("p",[v("code",{staticClass:"default"},[_._v("history")]),_._v("：h5提供了一个history全局对象，这个对象里面有各种方法，而history路由的实现，主要就是依靠于pushState与replaceState实现的，是需要后端配合的，不然刷新页面会404")]),_._v(" "),v("ul",[v("li",[_._v("window.history.go 可以跳转到浏览器会话历史中的指定的某一个记录页")]),_._v(" "),v("li",[_._v("window.history.forward 指向浏览器会话历史中的下一页，跟浏览器的前进按钮相同")]),_._v(" "),v("li",[_._v("window.history.back 返回浏览器会话历史中的上一页，跟浏览器的回退按钮功能相同")]),_._v(" "),v("li",[_._v("window.history.pushState 可以将给定的数据压入到浏览器会话历史栈中")]),_._v(" "),v("li",[_._v("window.history.replaceState 将当前的会话页面的url替换成指定的数据")])]),_._v(" "),v("h4",{attrs:{id:"_4-小程序与传统网页的区别？"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_4-小程序与传统网页的区别？"}},[_._v("#")]),_._v(" 4.小程序与传统网页的区别？")]),_._v(" "),v("p",[_._v("小程序其实是运行在一个微信团队或者说是企业应用内的一个基于浏览器内核创建的内置解析器里，而网页就是运行在浏览器内的")]),_._v(" "),v("p",[_._v("小程序对于开发者来说，兼容性问题其实可以不用太在意，因为例如微信团队会提供开发工具以及制定开发规范，但是网页运行的环境太多太杂，很容易出现兼容性问题")]),_._v(" "),v("p",[_._v("小程序对于硬件获取的权限比较充分，比如网络通信状态、数据缓存能力、硬件调用等等，但是浏览器环境没有这么充分的权限")]),_._v(" "),v("h4",{attrs:{id:"_5-浏览器运行过程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_5-浏览器运行过程"}},[_._v("#")]),_._v(" 5.浏览器运行过程")]),_._v(" "),v("ul",[v("li",[_._v("解析URL")]),_._v(" "),v("li",[_._v("缓存判断")]),_._v(" "),v("li",[_._v("DNS解析")]),_._v(" "),v("li",[_._v("获取MAC地址")]),_._v(" "),v("li",[_._v("TCP三次握手")]),_._v(" "),v("li",[_._v("HTTPS握手")]),_._v(" "),v("li",[_._v("返回数据")]),_._v(" "),v("li",[_._v("页面渲染")]),_._v(" "),v("li",[_._v("TCP四次挥手")])]),_._v(" "),v("h4",{attrs:{id:"_6-浏览器的缓存机制？"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_6-浏览器的缓存机制？"}},[_._v("#")]),_._v(" 6.浏览器的缓存机制？")]),_._v(" "),v("p",[_._v("浏览器缓存主要分为"),v("strong",[_._v("强缓存（也称本地缓存）"),v("strong",[_._v("和")]),_._v("协商缓存（也称弱缓存）")])]),_._v(" "),v("h5",{attrs:{id:"强缓存："}},[v("a",{staticClass:"header-anchor",attrs:{href:"#强缓存："}},[_._v("#")]),_._v(" 强缓存：")]),_._v(" "),v("p",[_._v("当请求资源的时，如果是之前请求过的并使用强缓存，那么在过期时间内将不会发送本次请求向服务器获取资源，而是直接从浏览器缓存中获取（不管资源是否改动）。过期了将重新从服务器获取，并再次强缓存。")]),_._v(" "),v("p",[_._v("状态码：200")]),_._v(" "),v("h5",{attrs:{id:"协商缓存："}},[v("a",{staticClass:"header-anchor",attrs:{href:"#协商缓存："}},[_._v("#")]),_._v(" 协商缓存：")]),_._v(" "),v("p",[_._v("当请求资源时，如果是之前请求过的并使用协商缓存，还是发送请求到服务器，服务器通过逻辑判断确认资源没有修改返回304状态码，那么本次的资源则是从缓存中获取；如果经过判断确认资源被修改过，则重新发送资源到客户端，并且客户端更新缓存。")]),_._v(" "),v("p",[_._v("状态码：304")]),_._v(" "),v("h4",{attrs:{id:"_7-浏览器的渲染过程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_7-浏览器的渲染过程"}},[_._v("#")]),_._v(" 7.浏览器的渲染过程")]),_._v(" "),v("ul",[v("li",[_._v("构建DOM树")]),_._v(" "),v("li",[_._v("样式计算，把 CSS 转换为浏览器能够理解的结构，并转换样式表中的属性值，使其标准化，生成CSSOM树（CSS规则树）")]),_._v(" "),v("li",[_._v("结合DOM树以及CSSOM树生成render树")]),_._v(" "),v("li",[_._v("解析完成，进行渲染")])]),_._v(" "),v("h4",{attrs:{id:"_8-css加载会造成阻塞吗"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_8-css加载会造成阻塞吗"}},[_._v("#")]),_._v(" 8.css加载会造成阻塞吗")]),_._v(" "),v("p",[_._v("CSS 加载会阻塞 Dom 的渲染，DOM 和 CSSOM 通常是并行构建的,所以 CSS 加载不会阻塞 DOM 的解析。\n然而,由于 Render Tree 是依赖于 DOM Tree 和 CSSOM Tree 的,\n所以他必须等待到 CSSOM Tree 构建完成,也就是 CSS 资源加载完成(或者 CSS 资源加载失败)后,才能开始渲染。")]),_._v(" "),v("h4",{attrs:{id:"_9-如何监听浏览器返回事件-并且阻止返回"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_9-如何监听浏览器返回事件-并且阻止返回"}},[_._v("#")]),_._v(" 9.如何监听浏览器返回事件,并且阻止返回")]),_._v(" "),v("p",[_._v("监听浏览器的popstate事件,在事件触发的时候向history内pushState一个当前页面，在点击后退前和点击时都插入一次，那样无论点前进还是后退永远都会留在这个页面了")]),_._v(" "),v("h3",{attrs:{id:"安全攻击"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#安全攻击"}},[_._v("#")]),_._v(" 安全攻击")]),_._v(" "),v("h4",{attrs:{id:"_1-csrf攻击是什么？如何防范？"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-csrf攻击是什么？如何防范？"}},[_._v("#")]),_._v(" 1.CSRF攻击是什么？如何防范？")]),_._v(" "),v("p",[_._v("跨站请求伪造，利用用户的已登录凭证来冒充用户攻击网站。")]),_._v(" "),v("ul",[v("li",[_._v("利用验证码")]),_._v(" "),v("li",[_._v("Referer检查")]),_._v(" "),v("li",[_._v("添加token验证")])]),_._v(" "),v("h4",{attrs:{id:"_2-xss攻击是什么？如何防范？"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-xss攻击是什么？如何防范？"}},[_._v("#")]),_._v(" 2.XSS攻击是什么？如何防范？")]),_._v(" "),v("p",[_._v("跨站脚本注入，攻击者在网站上注入恶意的客户端代码，通过恶意脚本对客户端网页进行篡改，从而在用户浏览网页时，对用户浏览器进行控制或者获取用户隐私数据的一种攻击方式。")]),_._v(" "),v("ul",[v("li",[_._v("设置HttpOnly防止窃取Cookie")]),_._v(" "),v("li",[_._v('输入检查，检查用户的输入项目是否存在有"<"、">"等特殊字符，如果存在就进行特殊编码处理')]),_._v(" "),v("li",[_._v("输出检查，服务端返回的数值也可能存在问题")])])])}),[],!1,null,null,null);t.default=s.exports}}]);
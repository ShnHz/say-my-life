(window.webpackJsonp=window.webpackJsonp||[]).push([[197],{794:function(v,_,e){"use strict";e.r(_);var t=e(24),a=Object(t.a)({},(function(){var v=this,_=v.$createElement,e=v._self._c||_;return e("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[e("h3",{attrs:{id:"vue2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vue2"}},[v._v("#")]),v._v(" Vue2")]),v._v(" "),e("h4",{attrs:{id:"_1-双向绑定的原理？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-双向绑定的原理？"}},[v._v("#")]),v._v(" 1.双向绑定的原理？")]),v._v(" "),e("p",[v._v("vue2是通过劫持数据和发布订阅者模式来实现响应式数据的，通过"),e("code",[v._v("Object.defineProperty")]),v._v("来监听数据的"),e("code",[v._v("getter")]),v._v("和"),e("code",[v._v("setter")]),v._v("，当数据改变后，会通知订阅者执行相应的操作。")]),v._v(" "),e("p",[v._v("但是这种方式也有一些缺陷：")]),v._v(" "),e("p",[v._v("通过下标修改数组数据或者给对象新增属性，这都不能被监听到，所以就无法触发组件的自动渲染。")]),v._v(" "),e("ul",[e("li",[e("p",[v._v("为什么监听不了对象？因为"),e("code",[v._v("vue")]),v._v("会在初始化的时候对"),e("code",[v._v("property")]),v._v("进行"),e("code",[v._v("getter")]),v._v("和"),e("code",[v._v("setter")]),v._v("的转换，所以在"),e("code",[v._v("data")]),v._v("对象内存在的属性"),e("code",[v._v("vue")]),v._v("才会转换为响应式数据，对于已经存在的实例，不会动态添加响应式"),e("code",[v._v("property")]),v._v("。")])]),v._v(" "),e("li",[e("p",[v._v("为什么监听不了数组？可能是因为性能原因，如果数组特别长的话，监听数组消耗的性能太大，而且"),e("code",[v._v("vue")]),v._v("并不能确定你的数组最终的长度会是多少。")])])]),v._v(" "),e("p",[v._v("首先要对数据进行劫持监听，所以我们需要设置一个监听器"),e("code",{staticClass:"default"},[v._v("Observer")]),v._v("，用来监听所有属性。如果属性发生变化了，就需要告诉订阅者"),e("code",{staticClass:"default"},[v._v("Watcher")]),v._v("看是否需要更新。因为订阅者是有很多个，所以我们需要有一个消息订阅器"),e("code",{staticClass:"default"},[v._v("Dep")]),v._v("来专门收集这些订阅者，然后在监听器"),e("code",{staticClass:"default"},[v._v("Observer")]),v._v("和订阅者"),e("code",{staticClass:"default"},[v._v("Watcher")]),v._v("之间进行统一管理。接着，我们还需要有一个指令解析器"),e("code",{staticClass:"default"},[v._v("Compile")]),v._v("，对每个节点元素进行扫描和解析，将相关指令对应初始化成一个订阅者"),e("code",{staticClass:"default"},[v._v("Watcher")]),v._v("，并替换模板数据或者绑定相应的函数，此时当订阅者"),e("code",{staticClass:"default"},[v._v("Watcher")]),v._v("接收到相应属性的变化，就会执行对应的更新函数，从而更新视图")]),v._v(" "),e("p",[v._v("observer：作用就是数据劫持，把data内的对象，传入并且利用"),e("code",[v._v("Object.defineProperty")]),v._v("来劫持数据get、set")]),v._v(" "),e("p",[v._v("dep：由于监听器和订阅者是一对多的关系,所以这里设计了一个管理中心,来管理某个监听器及其对应的订阅者的关系, 消息调度和依赖管理都靠它")]),v._v(" "),e("p",[v._v("watcher：当某个监听器监听到数据发生变化的时候，这个变化经过消息调度中心，最终会传递到所有该监听器对应的订阅者身上，然后这些订阅者分别执行自身的业务回调即可")]),v._v(" "),e("p",[v._v("compiler：编译模板，处理文本节点和元素节点")]),v._v(" "),e("p",[e("code",{staticClass:"default"},[v._v("v-model")]),v._v("其实就是，"),e("code",{staticClass:"default"},[v._v("v-on")]),v._v("和"),e("code",{staticClass:"default"},[v._v("v-bind")]),v._v("的语法糖。")]),v._v(" "),e("blockquote",[e("p",[v._v("双向绑定的作用是：数据和视图相互驱动更新，是相互影响的关系")])]),v._v(" "),e("h4",{attrs:{id:"_2-vue2的生命周期是怎么样的？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-vue2的生命周期是怎么样的？"}},[v._v("#")]),v._v(" 2.vue2的生命周期是怎么样的？")]),v._v(" "),e("p",[v._v("beforeCreated => created => beforeMounted => mounted => beforeUpdated => updated => beforeDestroy => destroyed")]),v._v(" "),e("p",[v._v("如果该组件写了 keep-alive ，那么还会有 activated、deactivated生命周期")]),v._v(" "),e("p",[v._v("activated：在组件激活时调用，使用keep-alive进行缓存，又希望每次切换组件的时候更新数据，就可以使用这个生命周期\ndeactivated：keep-alive组件被停用时")]),v._v(" "),e("h4",{attrs:{id:"_3-接口调用会放在哪个生命周期？为什么？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-接口调用会放在哪个生命周期？为什么？"}},[v._v("#")]),v._v(" 3.接口调用会放在哪个生命周期？为什么？")]),v._v(" "),e("p",[v._v("一般会放在"),e("code",[v._v("created")]),v._v("周期内，能更快的获取到数据渲染视图，\n但是也可以放到"),e("code",[v._v("mounted")]),v._v("周期内，如果涉及到DOM操作，就需要放到"),e("code",[v._v("mounted")]),v._v("周期内，因为在"),e("code",[v._v("mounted")]),v._v("后，虚拟"),e("code",[v._v("DOM")]),v._v("才会被真实"),e("code",[v._v("DOM")]),v._v("替换，才能拿到真实的"),e("code",[v._v("DOM")]),v._v("树。")]),v._v(" "),e("h4",{attrs:{id:"_4-v-model是怎么实现的"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-v-model是怎么实现的"}},[v._v("#")]),v._v(" 4.v-model是怎么实现的")]),v._v(" "),e("p",[v._v("源码分为三步，首先将表达式指向的"),e("code",{staticClass:"default"},[v._v("value(例如data.a)")]),v._v("绑定"),e("code",{staticClass:"default"},[v._v("Watcher")]),v._v("，再获取这个表达式指向的值赋值给"),e("code",{staticClass:"default"},[v._v("DOM")]),v._v("，然后绑定"),e("code",{staticClass:"default"},[v._v("input")]),v._v("事件，当“输入框”值改变时改变表达式指向的"),e("code",{staticClass:"default"},[v._v("value(例如data.a)")])]),v._v(" "),e("h4",{attrs:{id:"_5-v-show和v-if的区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-v-show和v-if的区别"}},[v._v("#")]),v._v(" 5.v-show和v-if的区别")]),v._v(" "),e("p",[v._v("作用其实是差不多的，展示效果是一样的，都是隐藏元素")]),v._v(" "),e("p",[e("code",{staticClass:"default"},[v._v("v-show")]),v._v("是控制元素的"),e("code",{staticClass:"default"},[v._v("display:none")]),v._v("，但是"),e("code",{staticClass:"default"},[v._v("dom")]),v._v("元素依旧会渲染")]),v._v(" "),e("p",[e("code",{staticClass:"default"},[v._v("v-if")]),v._v("是真正的会销毁元素，会完整的执行一个生命周期，在源码中其实就是给这个对象打上标记，生成"),e("code",{staticClass:"default"},[v._v("vnode")]),v._v("时候会忽略此元素")]),v._v(" "),e("h4",{attrs:{id:"_6-v-if和v-for为什么不能同时使用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-v-if和v-for为什么不能同时使用"}},[v._v("#")]),v._v(" 6.v-if和v-for为什么不能同时使用")]),v._v(" "),e("p",[v._v("因为v-for优先级比v-if高，这样就会判断很多次v-if造成性能浪费")]),v._v(" "),e("h4",{attrs:{id:"_7-vue插槽有哪些类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_7-vue插槽有哪些类型"}},[v._v("#")]),v._v(" 7.vue插槽有哪些类型")]),v._v(" "),e("ul",[e("li",[v._v("默认插槽")]),v._v(" "),e("li",[v._v("命名插槽")]),v._v(" "),e("li",[v._v("作用域插槽，就是父组件可以使用插槽组件传过来的参数以及数据（el-table slot-scope）")])]),v._v(" "),e("h4",{attrs:{id:"_8-vue插槽的原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_8-vue插槽的原理"}},[v._v("#")]),v._v(" 8.vue插槽的原理")]),v._v(" "),e("p",[v._v("vue组件实例化顺序为：父组件状态初始化(data、computed、watch...) --\x3e 模板编译 --\x3e 生成render方法 --\x3e 实例化渲染watcher --\x3e 调用render方法，生成VNode --\x3e patch VNode，转换为真实DOM --\x3e 实例化子组件 --\x3e ......重复相同的流程 --\x3e 子组件生成的真实DOM挂载到父组件生成的真实DOM上，挂载到页面中 --\x3e 移除旧节点")]),v._v(" "),e("p",[v._v("因为vue的组件实例化的顺序是由父组件=>子组件，所以能够提前获得父组件的插槽内容，然后当实例化子组件时，就将这部分内容连接起来")]),v._v(" "),e("h4",{attrs:{id:"_9-mixins遇到和组件内的函数相同名称会怎么样呢？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_9-mixins遇到和组件内的函数相同名称会怎么样呢？"}},[v._v("#")]),v._v(" 9.mixins遇到和组件内的函数相同名称会怎么样呢？")]),v._v(" "),e("p",[v._v("组件内的函数会覆盖mixins定义的函数")]),v._v(" "),e("h4",{attrs:{id:"_10-如何优化项目？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_10-如何优化项目？"}},[v._v("#")]),v._v(" 10.如何优化项目？")]),v._v(" "),e("p",[v._v("（1）编码阶段")]),v._v(" "),e("ul",[e("li",[v._v("尽量减少data中的数据，data中的数据都会增加getter和setter，会收集对应的watcher")]),v._v(" "),e("li",[v._v("v-if和v-for不能连用")]),v._v(" "),e("li",[v._v("如果需要使用v-for给每项元素绑定事件时使用事件代理")]),v._v(" "),e("li",[v._v("SPA 页面采用keep-alive缓存组件")]),v._v(" "),e("li",[v._v("在更多的情况下，使用v-if替代v-show")]),v._v(" "),e("li",[v._v("key保证唯一")]),v._v(" "),e("li",[v._v("使用路由懒加载、异步组件")]),v._v(" "),e("li",[v._v("防抖、节流")]),v._v(" "),e("li",[v._v("第三方模块按需导入")]),v._v(" "),e("li",[v._v("长列表滚动到可视区域动态加载")]),v._v(" "),e("li",[v._v("图片懒加载")])]),v._v(" "),e("p",[v._v("（2）SEO优化")]),v._v(" "),e("ul",[e("li",[v._v("预渲染")]),v._v(" "),e("li",[v._v("服务端渲染SSR")])]),v._v(" "),e("p",[v._v("（3）打包优化")]),v._v(" "),e("ul",[e("li",[v._v("压缩代码")]),v._v(" "),e("li",[v._v("Tree Shaking/Scope Hoisting")]),v._v(" "),e("li",[v._v("使用cdn加载第三方模块")]),v._v(" "),e("li",[v._v("多线程打包happypack")]),v._v(" "),e("li",[v._v("splitChunks抽离公共文件")]),v._v(" "),e("li",[v._v("sourceMap优化")])]),v._v(" "),e("p",[v._v("（4）用户体验")]),v._v(" "),e("ul",[e("li",[v._v("骨架屏")]),v._v(" "),e("li",[v._v("PWA")]),v._v(" "),e("li",[v._v("还可以使用缓存(客户端缓存、服务端缓存)优化、服务端开启gzip压缩等。")])]),v._v(" "),e("h4",{attrs:{id:"_11-说一说服务端渲染？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_11-说一说服务端渲染？"}},[v._v("#")]),v._v(" 11.说一说服务端渲染？")]),v._v(" "),e("p",[v._v("服务端渲染就是指再服务端完成dom结构与数据的拼接，发送给浏览器绑定事件和状态")]),v._v(" "),e("h4",{attrs:{id:"_12-为什么data-是一个函数？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_12-为什么data-是一个函数？"}},[v._v("#")]),v._v(" 12.为什么data()是一个函数？")]),v._v(" "),e("p",[v._v("避免变量污染，防止多个组件实例对象之间共用一个data，那其实这个就是利用了闭包。")]),v._v(" "),e("h4",{attrs:{id:"_13-scoped-原理？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_13-scoped-原理？"}},[v._v("#")]),v._v(" 13.scoped 原理？")]),v._v(" "),e("p",[v._v("scoped 会在 DOM 结构及 css 样式上加上唯一性的标记 "),e("code",{staticClass:"default"},[v._v("data-v-xxx")]),v._v(" 属性，从而达到样式私有化，不污染全局的作用；")]),v._v(" "),e("h4",{attrs:{id:"_14-大致讲一下vue的响应式思想？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_14-大致讲一下vue的响应式思想？"}},[v._v("#")]),v._v(" 14.大致讲一下vue的响应式思想？")]),v._v(" "),e("p",[v._v("就是利用track函数把被监听的对象以及对象改变后需要执行的操作函数，收集依赖到一个dep对象中，这个dep对象是个Set，因为可以自动去重，当监听的对象改变时，就执行trigger函数，通知所有依赖中的函数执行")]),v._v(" "),e("p",[v._v("存储的dep对象逻辑是这样的")]),v._v(" "),e("img",{attrs:{src:"https://cdn.chenyingshuang.cn/interview/vue/1.jpg"}}),v._v(" "),e("h4",{attrs:{id:"_15-vue-mixin的原理？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_15-vue-mixin的原理？"}},[v._v("#")]),v._v(" 15.vue mixin的原理？")]),v._v(" "),e("p",[v._v("原理就是根据不同策略来进行合并对象操作")]),v._v(" "),e("h3",{attrs:{id:"vue3"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vue3"}},[v._v("#")]),v._v(" Vue3")]),v._v(" "),e("h4",{attrs:{id:"_1-双向绑定的原理？-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-双向绑定的原理？-2"}},[v._v("#")]),v._v(" 1.双向绑定的原理？")]),v._v(" "),e("p",[v._v("会采用"),e("code",{staticClass:"default"},[v._v("Proxy")]),v._v("来实现数据劫持，"),e("code",{staticClass:"default"},[v._v("Proxy")]),v._v("的监听是深层次的，监听整个对象，而不是某个属性。")]),v._v(" "),e("p",[v._v("优点是能规避Object.defineProperty的问题：")]),v._v(" "),e("p",[v._v("深度监听，性能更好，vue2是一次性递归遍历所有，vue3是在set属性时，才做递归处理\n可监听对象 新增、删除 操作\n可监听数组变化")]),v._v(" "),e("h4",{attrs:{id:"_2-vue2与vue3的区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-vue2与vue3的区别"}},[v._v("#")]),v._v(" 2.vue2与vue3的区别")]),v._v(" "),e("ul",[e("li",[v._v("1.双向绑定原理变化\n相比于vue2.x，使用proxy的优势如下")])]),v._v(" "),e("p",[v._v("defineProperty只能监听某个属性，不能对全对象监听\n可以省去for in、闭包等内容来提升效率（直接绑定整个对象即可）\n可以监听数组，不用再去单独的对数组做特异性操作 vue3.x可以检测到数组内部数据的变化")]),v._v(" "),e("ul",[e("li",[v._v("2.Composition API")]),v._v(" "),e("li",[v._v("3.生命周期变化")]),v._v(" "),e("li",[v._v("4.vue3 Teleport瞬移组件")]),v._v(" "),e("li",[v._v("5.编程思想的变化，vue3是函数式编程，更符合一个程序员的习惯吧，而且函数也有着扩展性更强，复用性更强的优点")])]),v._v(" "),e("h4",{attrs:{id:"_3-vue3的diff算法对比vue2的优化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-vue3的diff算法对比vue2的优化"}},[v._v("#")]),v._v(" 3.vue3的diff算法对比vue2的优化")]),v._v(" "),e("p",[v._v("添加静态标记，就是把各类情况打上标记 比如说一个静态节点 = -1")]),v._v(" "),e("p",[v._v("那么在diff的时候就会跳过标记为-1的对比")]),v._v(" "),e("p",[v._v("算法优化，vue3利用了最长递增子序列的方法减少DOM移动")]),v._v(" "),e("h3",{attrs:{id:"vuex-pinia"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vuex-pinia"}},[v._v("#")]),v._v(" Vuex/Pinia")]),v._v(" "),e("h4",{attrs:{id:"_1-说一说vuex是什么？有哪些属性？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-说一说vuex是什么？有哪些属性？"}},[v._v("#")]),v._v(" 1.说一说Vuex是什么？有哪些属性？")]),v._v(" "),e("p",[e("code",[v._v("Vuex")]),v._v("是全局状态管理仓库")]),v._v(" "),e("ul",[e("li",[v._v("state:数据源")]),v._v(" "),e("li",[v._v("mutations:同步处理事件")]),v._v(" "),e("li",[v._v("actions:异步处理事件")]),v._v(" "),e("li",[v._v("getter:过滤器")]),v._v(" "),e("li",[v._v("module:模块")])]),v._v(" "),e("h4",{attrs:{id:"_2-pinia是什么，和vuex有什么区别？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-pinia是什么，和vuex有什么区别？"}},[v._v("#")]),v._v(" 2.Pinia是什么，和vuex有什么区别？")]),v._v(" "),e("p",[e("code",[v._v("Pinia")]),v._v("其实就是"),e("code",[v._v("Vuex")]),v._v("的升级版本，5.0版本")]),v._v(" "),e("ul",[e("li",[v._v("简化了状态处理，没有了"),e("code",[v._v("mutations")]),v._v("，只保留了"),e("code",[v._v("actions")]),v._v("，所以说同步/异步处理事件都放在了"),e("code",[v._v("actions")]),v._v("里面")]),v._v(" "),e("li",[v._v("代码简洁明了")]),v._v(" "),e("li",[v._v("不再有"),e("code",[v._v("module")]),v._v("式嵌套结构，你可以在"),e("code",[v._v("store")]),v._v("中导入另一个"),e("code",[v._v("store")]),v._v("来隐式嵌套")]),v._v(" "),e("li",[v._v("更加支持"),e("code",[v._v("ts")])]),v._v(" "),e("li",[v._v("更加轻量化，包体才只有1kb左右")])]),v._v(" "),e("h4",{attrs:{id:"_3-vuex的原理？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-vuex的原理？"}},[v._v("#")]),v._v(" 3.vuex的原理？")]),v._v(" "),e("p",[v._v("利用了全局混入Mixin，将你所创建的store对象，混入到每一个Vue实例中")]),v._v(" "),e("h4",{attrs:{id:"怎么解决pinia的持久化问题？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#怎么解决pinia的持久化问题？"}},[v._v("#")]),v._v(" 怎么解决Pinia的持久化问题？")]),v._v(" "),e("p",[v._v("安装持久化插件 "),e("code",[v._v("pinia-plugin-persistedstate")])]),v._v(" "),e("p",[v._v("本质其实就是利用了"),e("code",[v._v("localStorage")]),v._v("来实现持有化")]),v._v(" "),e("h3",{attrs:{id:"vue-router"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vue-router"}},[v._v("#")]),v._v(" vue-router")]),v._v(" "),e("h4",{attrs:{id:"_1-vue-router路由守卫"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-vue-router路由守卫"}},[v._v("#")]),v._v(" 1.vue-router路由守卫")]),v._v(" "),e("p",[v._v("其实就是路由跳转过程中的一些钩子函数，再直白点就是路由跳转是一个大的过程，这些大的过程分为路由前中后等等些小的过程，在这些小的过程中都有对应的函数，这些函数定义了做一些事情的时机，这就是导航守卫。")]),v._v(" "),e("h5",{attrs:{id:"全局守卫"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#全局守卫"}},[v._v("#")]),v._v(" 全局守卫")]),v._v(" "),e("ul",[e("li",[v._v("全局前置守卫beforeEach")]),v._v(" "),e("li",[v._v("全局解析守卫beforeResolve")]),v._v(" "),e("li",[v._v("全局后置钩子afterEach")])]),v._v(" "),e("h5",{attrs:{id:"路由独享的守卫"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#路由独享的守卫"}},[v._v("#")]),v._v(" 路由独享的守卫")]),v._v(" "),e("p",[v._v("指在单个路由配置的时候也可以设置的钩子函数")]),v._v(" "),e("ul",[e("li",[v._v("beforeEnter")])]),v._v(" "),e("h5",{attrs:{id:"组件内的守卫"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#组件内的守卫"}},[v._v("#")]),v._v(" 组件内的守卫")]),v._v(" "),e("ul",[e("li",[v._v("beforeRouteEnter 在渲染该组件的对应路由被 confirm 前调用")]),v._v(" "),e("li",[v._v("beforeRouteUpdate 在当前路由改变，但是该组件被复用时调用")]),v._v(" "),e("li",[v._v("beforeRouteLeave 导航离开该组件的对应路由时调用")])]),v._v(" "),e("h3",{attrs:{id:"其他"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#其他"}},[v._v("#")]),v._v(" 其他")]),v._v(" "),e("h4",{attrs:{id:"_1-说一说-vue-列表为什么加-key？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-说一说-vue-列表为什么加-key？"}},[v._v("#")]),v._v(" 1.说一说 Vue 列表为什么加 key？")]),v._v(" "),e("p",[v._v("便于"),e("code",[v._v("diff")]),v._v("，操作更准确，优化性能。")]),v._v(" "),e("h4",{attrs:{id:"_2-谈一下mvvm？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-谈一下mvvm？"}},[v._v("#")]),v._v(" 2.谈一下MVVM？")]),v._v(" "),e("p",[e("code",[v._v("MVVM")]),v._v("其实是一种设计思想，模型-视图-视图模型")]),v._v(" "),e("p",[v._v("实现了"),e("code",[v._v("view")]),v._v("层和"),e("code",[v._v("model")]),v._v("层的自动同步，当"),e("code",[v._v("model")]),v._v("数据改变时，不需要自己手动去操作"),e("code",[v._v("DOM")])]),v._v(" "),e("p",[e("code",[v._v("react")]),v._v("不是"),e("code",[v._v("MVVM")]),v._v("，因为没有实现双向绑定，需要用户去手动提交数据，重新渲染"),e("code",[v._v("DOM")])]),v._v(" "),e("h4",{attrs:{id:"_3-mvvm和mvc的区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-mvvm和mvc的区别"}},[v._v("#")]),v._v(" 3.MVVM和MVC的区别")]),v._v(" "),e("p",[e("code",[v._v("MVVM")]),v._v("主要的特性其实就是双向绑定当"),e("code",[v._v("m")]),v._v("层数据修改，"),e("code",[v._v("vm")]),v._v("层会监听到数据变化，自动通知到"),e("code",[v._v("v")]),v._v("层进行相应操作")]),v._v(" "),e("p",[e("code",[v._v("MVC")]),v._v("的设计思想就是把数据与视图层分离，但是还是需要有大量的DOM操作，这会影响到页面的渲染性能，降低用户体验")]),v._v(" "),e("h4",{attrs:{id:"_4-vue的-nexttick原理是什么？作用是什么？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-vue的-nexttick原理是什么？作用是什么？"}},[v._v("#")]),v._v(" 4.vue的$nextTick原理是什么？作用是什么？")]),v._v(" "),e("p",[v._v("由于"),e("code",[v._v("vue")]),v._v("的"),e("code",[v._v("DOM")]),v._v("更新是异步的，所以当数据发生变化时，"),e("code",[v._v("DOM")]),v._v("并不会立即更新，而是会等到事件循环后统一更新（微任务，但实际上不同vue版本是不同的）。其实"),e("code",[v._v("$nextTick")]),v._v("本质上就是一个"),e("code",[v._v("promise")])]),v._v(" "),e("p",[v._v("作用：在"),e("code",[v._v("$nextTick")]),v._v("函数体内的代码会在"),e("code",[v._v("DOM")]),v._v("更新后再执行，这样就可以拿到最新的"),e("code",[v._v("DOM")]),v._v("。")]),v._v(" "),e("h4",{attrs:{id:"_4-组件库是如何维护的？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-组件库是如何维护的？"}},[v._v("#")]),v._v(" 4.组件库是如何维护的？")]),v._v(" "),e("p",[v._v("自己的组件库呢其实相当于对element-ui或者ant的二次封装。结合业务的使用场景来进行封装")]),v._v(" "),e("p",[v._v("升级后要确保向下兼容，意思就是说旧版本的不更新也能够正常使用。")]),v._v(" "),e("p",[v._v("那由于我其实是一个人在开发前端，所以说其实代码规范也完全是按照我个人习惯来制定了，当然我也是尽量去遵守自己制定的一些规则，这样起码自己看起来不会特别乱。")]),v._v(" "),e("h4",{attrs:{id:"_5-团队开发？代码管理？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-团队开发？代码管理？"}},[v._v("#")]),v._v(" 5.团队开发？代码管理？")]),v._v(" "),e("p",[v._v("分支就是：\n开发环境\n测试环境\n生产环境")]),v._v(" "),e("p",[v._v("利用gitlab的钩子实现自动打包，自动部署。这其实就是前端工程化的东西。")]),v._v(" "),e("p",[v._v("利用node去写接口测试，去监听页面报错等等，利用插件去打开浏览器页面，然后执行某些操作来看看可能会出现问题的元素会不会正常显示之类的。")]),v._v(" "),e("h4",{attrs:{id:"_6-如何优化项目？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-如何优化项目？"}},[v._v("#")]),v._v(" 6.如何优化项目？")]),v._v(" "),e("ul",[e("li",[v._v("v-if和v-show区分使用场景")]),v._v(" "),e("li",[v._v("computed和watch区分使用场景，computed是有缓存的，所有依赖其他值进行计算的时候效率会比较高，我们需要在数据变化时执行异步或开销较大的操作时，应该使用 watch")]),v._v(" "),e("li",[v._v("v-for加key")]),v._v(" "),e("li",[v._v("长列表优化（虚拟滚动）、懒加载")]),v._v(" "),e("li",[v._v("图片资源懒加载")]),v._v(" "),e("li",[v._v("路由懒加载")]),v._v(" "),e("li",[v._v("插件按需引入")])]),v._v(" "),e("h4",{attrs:{id:"_7-比较引以为傲的组件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_7-比较引以为傲的组件"}},[v._v("#")]),v._v(" 7.比较引以为傲的组件")]),v._v(" "),e("p",[v._v("日期选择器,可以实现n种模式的切换,比如选择年月日周这几个周期")])])}),[],!1,null,null,null);_.default=a.exports}}]);